from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


loan = pd.read_csv('Loan.csv')
loan.head()

def new_col(df):
    if df['Gender'] == 'Male':
        return 1
    else:
        return 0
        
loan['new'] = loan.apply(new_col, axis = 1)
loan.drop('Gender', axis = 1, inplace=True)


y = loan['Loan_sanctioned']
X = loan.drop('Loan_sanctioned',axis=1)

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=21, stratify = y)

knn = KNeighborsClassifier(n_neighbors=8)
knn.fit(X_train, y_train)
#y_pred = knn.predict(X_test)

knn.score(X_test, y_test)
knn.score(X_train, y_train)




# Setup arrays to store train and test accuracies
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

# Loop over different values of k
for i, k in enumerate(neighbors):
    # Setup a k-NN Classifier with k neighbors: knn
    knn = KNeighborsClassifier(n_neighbors=k)

    # Fit the classifier to the training data
    knn.fit(X_train,y_train)
    
    #Compute accuracy on the training set
    train_accuracy[i] = knn.score(X_train,y_train)

    #Compute accuracy on the testing set
    test_accuracy[i] = knn.score(X_test,y_test)

# Generate plot
plt.title('k-NN: Varying Number of Neighbors')
plt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training Accuracy')
plt.legend()
plt.xlabel('Number of Neighbors')
plt.ylabel('Accuracy')
plt.show()
